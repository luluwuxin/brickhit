{"version":3,"sources":["PBKDF2Async.js"],"names":["C","window","require","Crypto","util","charenc","UTF8","Binary","nextTick","process","setTimeout","callback","PBKDF2Async","password","salt","keylen","options","constructor","String","stringToBytes","hasher","SHA1","iterations","progressChangeHandler","onProgressChange","totalIterations","Math","ceil","_digestsize","fireProgressChange","currentIteration","iterationsSoFar","derivedKeyBytes","length","round","PRF","HMAC","asBytes","blockindex","outer","inner","block","concat","wordsToBytes","u","i","j","asString","bytesToString","bytesToHex"],"mappings":"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","file":"PBKDF2Async.js","sourceRoot":"../../../../../../../../assets/script/wx/utils/cryptojs/lib","sourcesContent":["(function(){\r\n\r\nvar C = (typeof window === 'undefined') ? require('./Crypto').Crypto : window.Crypto;\r\n\r\n// Shortcuts\r\nvar util = C.util,\r\n    charenc = C.charenc,\r\n    UTF8 = charenc.UTF8,\r\n    Binary = charenc.Binary;\r\n\r\nif (!C.nextTick) {\r\n    // node.js has setTime out but prefer process.nextTick\r\n    if (typeof process != 'undefined' && typeof process.nextTick !== 'undefined') {\r\n        C.nextTick = process.nextTick;\r\n    } else if (typeof setTimeout !== 'undefined') {\r\n        C.nextTick = function (callback) {\r\n            setTimeout(callback, 0);\r\n        };\r\n    }\r\n}\r\n\r\nC.PBKDF2Async = function (password, salt, keylen, callback, options) {\r\n\r\n    // Convert to byte arrays\r\n    if (password.constructor == String) password = UTF8.stringToBytes(password);\r\n    if (salt.constructor == String) salt = UTF8.stringToBytes(salt);\r\n    /* else, assume byte arrays already */\r\n\r\n    // Defaults\r\n    var hasher = options && options.hasher || C.SHA1,\r\n        iterations = options && options.iterations || 1;\r\n\r\n    // Progress callback option\r\n    var progressChangeHandler = options && options.onProgressChange;\r\n    var totalIterations = Math.ceil(keylen / hasher._digestsize) * iterations;\r\n    function fireProgressChange(currentIteration) {\r\n        if (progressChangeHandler) {\r\n            var iterationsSoFar = derivedKeyBytes.length / hasher._digestsize * iterations + currentIteration;\r\n            setTimeout(function () {\r\n                progressChangeHandler(Math.round(iterationsSoFar / totalIterations * 100));\r\n            }, 0);\r\n        }\r\n    }\r\n\r\n    // Pseudo-random function\r\n    function PRF(password, salt) {\r\n        return C.HMAC(hasher, salt, password, { asBytes: true });\r\n    }\r\n\r\n    var nextTick = C.nextTick;\r\n\r\n    // Generate key\r\n    var derivedKeyBytes = [],\r\n        blockindex = 1;\r\n\r\n    var outer, inner;\r\n    nextTick(outer = function () {\r\n        if (derivedKeyBytes.length < keylen) {\r\n            var block = PRF(password, salt.concat(util.wordsToBytes([blockindex])));\r\n            fireProgressChange(1);\r\n\r\n            var u = block, i = 1;\r\n            nextTick(inner = function () {\r\n                if (i < iterations) {\r\n                    u = PRF(password, u);\r\n                    for (var j = 0; j < block.length; j++) block[j] ^= u[j];\r\n                    i++;\r\n                    fireProgressChange(i);\r\n\r\n                    nextTick(inner);\r\n                } else {\r\n                    derivedKeyBytes = derivedKeyBytes.concat(block);\r\n                    blockindex++;\r\n                    nextTick(outer);\r\n                }\r\n            });\r\n        } else {\r\n            // Truncate excess bytes\r\n            derivedKeyBytes.length = keylen;\r\n            callback(\r\n                    options && options.asBytes ? derivedKeyBytes :\r\n                    options && options.asString ? Binary.bytesToString(derivedKeyBytes) :\r\n                    util.bytesToHex(derivedKeyBytes));\r\n        }\r\n    });\r\n};\r\n\r\n})();\r\n"]}