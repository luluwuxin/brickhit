{"version":3,"sources":["PBKDF2.js"],"names":["C","window","require","Crypto","util","charenc","UTF8","Binary","PBKDF2","password","salt","keylen","options","constructor","String","stringToBytes","hasher","SHA1","iterations","PRF","HMAC","asBytes","derivedKeyBytes","blockindex","length","block","concat","wordsToBytes","u","i","j","asString","bytesToString","bytesToHex"],"mappings":";;;;;;AAAA,CAAC,YAAU;;AAEX,KAAIA,IAAK,OAAOC,MAAP,KAAkB,WAAnB,GAAkCC,QAAQ,UAAR,EAAoBC,MAAtD,GAA+DF,OAAOE,MAA9E;;AAEA;AACA,KAAIC,OAAOJ,EAAEI,IAAb;AAAA,KACIC,UAAUL,EAAEK,OADhB;AAAA,KAEIC,OAAOD,QAAQC,IAFnB;AAAA,KAGIC,SAASF,QAAQE,MAHrB;;AAKAP,GAAEQ,MAAF,GAAW,UAAUC,QAAV,EAAoBC,IAApB,EAA0BC,MAA1B,EAAkCC,OAAlC,EAA2C;;AAErD;AACA,MAAIH,SAASI,WAAT,IAAwBC,MAA5B,EAAoCL,WAAWH,KAAKS,aAAL,CAAmBN,QAAnB,CAAX;AACpC,MAAIC,KAAKG,WAAL,IAAoBC,MAAxB,EAAgCJ,OAAOJ,KAAKS,aAAL,CAAmBL,IAAnB,CAAP;AAChC;;AAEA;AACA,MAAIM,SAASJ,WAAWA,QAAQI,MAAnB,IAA6BhB,EAAEiB,IAA5C;AAAA,MACIC,aAAaN,WAAWA,QAAQM,UAAnB,IAAiC,CADlD;;AAGA;AACA,WAASC,GAAT,CAAaV,QAAb,EAAuBC,IAAvB,EAA6B;AAC5B,UAAOV,EAAEoB,IAAF,CAAOJ,MAAP,EAAeN,IAAf,EAAqBD,QAArB,EAA+B,EAAEY,SAAS,IAAX,EAA/B,CAAP;AACA;;AAED;AACA,MAAIC,kBAAkB,EAAtB;AAAA,MACIC,aAAa,CADjB;AAEA,SAAOD,gBAAgBE,MAAhB,GAAyBb,MAAhC,EAAwC;AACvC,OAAIc,QAAQN,IAAIV,QAAJ,EAAcC,KAAKgB,MAAL,CAAYtB,KAAKuB,YAAL,CAAkB,CAACJ,UAAD,CAAlB,CAAZ,CAAd,CAAZ;AACA,QAAK,IAAIK,IAAIH,KAAR,EAAeI,IAAI,CAAxB,EAA2BA,IAAIX,UAA/B,EAA2CW,GAA3C,EAAgD;AAC/CD,QAAIT,IAAIV,QAAJ,EAAcmB,CAAd,CAAJ;AACA,SAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAIL,MAAMD,MAA1B,EAAkCM,GAAlC;AAAuCL,WAAMK,CAAN,KAAYF,EAAEE,CAAF,CAAZ;AAAvC;AACA;AACDR,qBAAkBA,gBAAgBI,MAAhB,CAAuBD,KAAvB,CAAlB;AACAF;AACA;;AAED;AACAD,kBAAgBE,MAAhB,GAAyBb,MAAzB;;AAEA,SAAOC,WAAWA,QAAQS,OAAnB,GAA6BC,eAA7B,GACAV,WAAWA,QAAQmB,QAAnB,GAA8BxB,OAAOyB,aAAP,CAAqBV,eAArB,CAA9B,GACAlB,KAAK6B,UAAL,CAAgBX,eAAhB,CAFP;AAIA,EApCD;AAsCC,CAhDD","file":"PBKDF2.js","sourceRoot":"../../../../../../../../assets/script/wx/utils/cryptojs/lib","sourcesContent":["(function(){\r\n\r\nvar C = (typeof window === 'undefined') ? require('./Crypto').Crypto : window.Crypto;\r\n\r\n// Shortcuts\r\nvar util = C.util,\r\n    charenc = C.charenc,\r\n    UTF8 = charenc.UTF8,\r\n    Binary = charenc.Binary;\r\n\r\nC.PBKDF2 = function (password, salt, keylen, options) {\r\n\r\n\t// Convert to byte arrays\r\n\tif (password.constructor == String) password = UTF8.stringToBytes(password);\r\n\tif (salt.constructor == String) salt = UTF8.stringToBytes(salt);\r\n\t/* else, assume byte arrays already */\r\n\r\n\t// Defaults\r\n\tvar hasher = options && options.hasher || C.SHA1,\r\n\t    iterations = options && options.iterations || 1;\r\n\r\n\t// Pseudo-random function\r\n\tfunction PRF(password, salt) {\r\n\t\treturn C.HMAC(hasher, salt, password, { asBytes: true });\r\n\t}\r\n\r\n\t// Generate key\r\n\tvar derivedKeyBytes = [],\r\n\t    blockindex = 1;\r\n\twhile (derivedKeyBytes.length < keylen) {\r\n\t\tvar block = PRF(password, salt.concat(util.wordsToBytes([blockindex])));\r\n\t\tfor (var u = block, i = 1; i < iterations; i++) {\r\n\t\t\tu = PRF(password, u);\r\n\t\t\tfor (var j = 0; j < block.length; j++) block[j] ^= u[j];\r\n\t\t}\r\n\t\tderivedKeyBytes = derivedKeyBytes.concat(block);\r\n\t\tblockindex++;\r\n\t}\r\n\r\n\t// Truncate excess bytes\r\n\tderivedKeyBytes.length = keylen;\r\n\r\n\treturn options && options.asBytes ? derivedKeyBytes :\r\n\t       options && options.asString ? Binary.bytesToString(derivedKeyBytes) :\r\n\t       util.bytesToHex(derivedKeyBytes);\r\n\r\n};\r\n\r\n})();\r\n"]}