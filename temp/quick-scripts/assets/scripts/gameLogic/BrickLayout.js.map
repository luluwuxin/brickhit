{"version":3,"sources":["BrickLayout.js"],"names":["timeOut","ballLimit","map","f","arr","compose","f1","f2","x","equi","a","b","Math","floor","abs","getSameRow","pos","node","y","getSameColumn","distance","p1","p2","dx","dy","squre","sqrt","foodType","require","FOOD_TYPE","concatnv","n","value","concat","getSetting","num","flg","ar","prime","size","length","hashMap","dp","idx","console","log","TYPE_NULL","left","slice","right","getHashMap","rand","cc","random0To1","sets","brickSetting","getSet","score","computepl","Class","extends","Component","properties","padding","spacing","cols","brickPrefab","Prefab","brick1Prefab","foodPrefab","line","default","type","Node","getCentorPos","p","width","height","convertToWorldSpaceAR","onLoad","ceng","reset","ctl","children","destroy","removeAllChildren","brickNode","instantiate","nodeWidth","nodeHeight","bricksNumber","gameCtl","newBrickLayout","repeat","self","j","yoffset","window","gameScore","empty","set","config","item","pl","pList","i","hppl","hp","configNode","parent","_type","TYPE_BRICK","getComponent","init","down","over","getPosition","death","min","finished","callFunc","obj","target","action","sequence","moveBy","runAction","destroyNode","brick","broken","destroyOneRow","getList","destroyList","destroyOneColumn","destroy4Side","isNear","getRow","getNear","getColumn"],"mappings":"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","file":"BrickLayout.js","sourceRoot":"../../../../../assets/scripts/gameLogic","sourcesContent":["let timeOut = 0.5;\r\nlet ballLimit = 20;\r\n\r\nvar map = (f, arr) => arr.map(f);\r\nvar compose = (f1, f2) => (x) => f1(f2(x));\r\nvar equi = (a, b) => Math.floor(Math.abs(a - b)) == 0;\r\nvar getSameRow = (pos, arr) => {\r\n    return map((node) => node && equi(node.y, pos.y) ? node : null, arr)\r\n};\r\nvar getSameColumn = (pos, arr) => {\r\n    return map((node) => node && equi(node.x, pos.x) ? node : null, arr)\r\n};\r\nvar distance = (p1, p2) => {\r\n    let dx = p1.x - p2.x;\r\n    let dy = p1.y - p2.y;\r\n    var squre = (x) => x * x;\r\n    return Math.sqrt(squre(dx) + squre(dy));\r\n}\r\nconst foodType = require(\"Const\").FOOD_TYPE;\r\nconst concatnv = (n, value, arr)=>{\r\n    if(n <= 0) return arr;\r\n    return concatnv(n - 1, value, arr.concat(value))\r\n};\r\n//{@num 数量}\r\n//{@flg 标签}\r\n//{@arr Map}\r\nconst getSetting = (num, flg, ar) => {\r\n    const prime = 251;\r\n    const size = ar.length;\r\n    //@dp 递归层数\r\n    const hashMap = (dp, idx, arr) =>{\r\n        if (dp > size) {//没有空位\r\n            console.log(\"error settings!!!\", arr, flg);\r\n            return arr;\r\n        }\r\n        //console.log(arr, idx, arr[idx], foodType.TYPE_NULL);\r\n        idx = idx % size;\r\n        if (arr[idx] == foodType.TYPE_NULL) {\r\n            const left = arr.slice(0, idx)  //[0, idx)\r\n            const right = arr.slice(idx + 1);//[idx + 1, size)\r\n            return left.concat(flg, right);\r\n        }\r\n        //冲突处理\r\n        else return hashMap(dp + 1, idx + prime, arr);\r\n    };\r\n    const getHashMap = (n, arr) => {\r\n        if (n > num) return arr;\r\n        const rand = Math.floor(cc.random0To1() * size);\r\n        const map = hashMap(1, rand, arr);\r\n        return getHashMap(n + 1, map);\r\n    }\r\n    return getHashMap(1, ar);\r\n\r\n};\r\nconst sets = require(\"Settings\").brickSetting;\r\nconst getSet = (score) => require(\"Settings\").getSet(sets, score);\r\n/*\r\nconst getSet = (score)=>{\r\n    const arr = sets\r\n    const search = (idx)=>{\r\n        if(idx >= arr.length) return;\r\n        const ans = arr[idx]\r\n        if(ans.score > score) return ans;\r\n        else return search(idx + 1);\r\n    }\r\n    return search(0);\r\n};\r\n*/\r\nconst computepl = require(\"Settings\").computepl;\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        padding: 0,\r\n        spacing: 0,\r\n        cols: 0,\r\n        brickPrefab: cc.Prefab,\r\n        brick1Prefab: cc.Prefab,\r\n        foodPrefab: cc.Prefab,\r\n        //bricksNumber: 0,\r\n        line: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n    },\r\n    getCentorPos: function () {\r\n        let pos = cc.p(this.node.width / 2, -this.node.height / 2);\r\n        return this.node.convertToWorldSpaceAR(pos);\r\n    },\r\n    onLoad: function () {\r\n        this.ceng = 0;\r\n    },\r\n\r\n    reset: function (ctl) {\r\n        this.node.children.map((node)=>node.destroy());\r\n        this.node.removeAllChildren();\r\n        let brickNode = cc.instantiate(this.brickPrefab);\r\n        this.nodeWidth = brickNode.width;\r\n        this.nodeHeight = brickNode.height;\r\n        this.bricksNumber = Math.floor((this.node.width - this.padding) / (brickNode.width + this.padding));\r\n        brickNode.destroy();\r\n        brickNode = null;\r\n        this.gameCtl = ctl;\r\n        //this.newBrickLayout();\r\n        this.ceng = 0;\r\n    },\r\n    newBrickLayout: function (repeat) {\r\n        let self = this;\r\n\r\n        for (let j = 0; j < repeat; j++) {\r\n            const yoffset = j * (this.spacing + this.nodeHeight);\r\n            const score = window.gameScore + j;\r\n\r\n            const empty = concatnv(this.bricksNumber, foodType.TYPE_NULL, []);\r\n            //console.log(empty);\r\n            const set = getSet(score);\r\n            let map = empty;\r\n            set.config.map((item)=>{\r\n                const type = item.type;\r\n                const pl = item.pList;\r\n                const num = computepl(pl);\r\n                map = getSetting(num, type, map);\r\n            });\r\n            /*\r\n            const brickNum = computepl(set.brickpl);\r\n            const brickSet = getSetting(brickNum, foodType.TYPE_BRICK,empty);\r\n            //console.log(\"brickSet\", brickSet);\r\n            const ballNum = computepl(set.ballpl);\r\n            const ballSet = getSetting(ballNum, foodType.TYPE_BALL,brickSet);\r\n            //console.log(\"ballSet\", ballSet);\r\n            const boomNum = computepl(set.boompl);\r\n            const boomSet = getSetting(boomNum, foodType.TYPE_BOOM,ballSet);\r\n            //console.log(\"boomSet:\", boomSet);\r\n            const buffNum = computepl(set.buffpl);\r\n            const buffSet = getSetting(buffNum, foodType.TYPE_BUFF,boomSet);\r\n            //console.log(\"buffSet:\", buffSet);\r\n            const map = buffSet;\r\n            */\r\n            for (let i = 0; i < this.bricksNumber; i++) {\r\n                const hppl = computepl(set.hppl);\r\n                const hp = hppl[0] + Math.floor((hppl[1] - hppl[0]) * cc.random0To1());\r\n                const configNode = (node) => {\r\n                    node.parent = this.node;\r\n                    node.x = this.padding + (i % this.cols) * (this.nodeWidth + this.padding) + this.nodeWidth / 2;\r\n                    node.y = yoffset - this.spacing - this.nodeHeight / 2;\r\n                }\r\n                const _type = map[i];\r\n\r\n                let brickNode;\r\n                if (_type == foodType.TYPE_NULL) continue;\r\n                else if (_type == foodType.TYPE_BRICK) {\r\n                    const node = cc.instantiate(this.brickPrefab);\r\n                    node.getComponent(\"Brick\").init(hp);\r\n                    configNode(node);\r\n                }\r\n                else {\r\n                    const node = cc.instantiate(this.foodPrefab);\r\n                    node.getComponent(\"Food\").init(_type);\r\n                    configNode(node);\r\n                }\r\n            }\r\n        }\r\n        /*\r\n        let special = 0;\r\n        for (var j = 0; j < repeat; j++) {\r\n            let yoffset = j * (this.spacing + this.nodeHeight);\r\n            let score = window.gameScore + j;\r\n            let ballCnt = 0;\r\n            let boomCnt = 0;\r\n            let buffCnt = 0;\r\n            const ballMax = score < 30 ? 3 : (score < 80 ? 2 : 1)\r\n            const boomMax = 1;\r\n            const buffMax = 2;\r\n            let pleft = (score < 10) ? 0.0 : 0.02;\r\n\r\n            let poff = (score < 20) ? 0.05 : 0.0;\r\n            let brickCnt = 0;\r\n\r\n            this.ceng += 1;\r\n            let ceng = this.ceng;\r\n            if (ceng == 1) {\r\n                this.map = new Array();\r\n                let total = 2 * this.bricksNumber;\r\n                //@dp 递归层数\r\n                var setHashMap = function (map, key, dp) {\r\n                    if (dp >= total) return;\r\n                    key = key % total;\r\n                    if (!map[key]) map[key] = true;\r\n                    //冲突处理 注意total大小\r\n                    else setHashMap(map, (key + 1) % total, dp + 1);\r\n                }\r\n                var setMap = (r) => setHashMap(this.map, r, 1);\r\n                //第一个块位置\r\n                let random = Math.floor(cc.random0To1() * total) % total;\r\n                setMap(random)\r\n                //第二个块位置\r\n                random = Math.floor(cc.random0To1() * total) % total;\r\n                setMap(random);\r\n            }\r\n            var getBrickLimit = function () {\r\n                if (score < 10) return 2;\r\n                if (score < 30) return 3;\r\n                if (score < 60) return 4;\r\n                if (score < 100) return 5;\r\n            }\r\n            var getBrickPrefabNode = function () {\r\n                let rand = cc.random0To1();\r\n                let p1 = 2.0;\r\n                if (rand < p1) return cc.instantiate(self.brickPrefab);\r\n                else {\r\n                    let node = cc.instantiate(self.brick1Prefab);\r\n                    let p = (1.0 - p1) / 4;\r\n                    node.rotation = 90.0 * Math.ceil((rand - p1) / p);\r\n                    return node;\r\n                }\r\n            }\r\n            let hpSetting = [1, 2, 3, 7, 12]\r\n            let idx = Math.floor(score / 30);\r\n            for (let i = 0; i < this.bricksNumber; i++) {\r\n\r\n                //if(this.ceng % 10 == 1 || this.ceng % 10 == 2) break;\r\n\r\n                let rand = cc.random0To1();\r\n\r\n                let rand2 = cc.random0To1();\r\n                let hp = 1;\r\n                let base, dhp;\r\n                if(idx + 1 > hpSetting.length) {base = hpSetting[hpSetting.length - 1]; dhp = 0;}\r\n                else {base = hpSetting[idx]; dhp = hpSetting[idx + 1] - hpSetting[idx];}\r\n                hp = base + Math.floor(rand2 * dhp);\r\n\r\n                //特殊处理 必出一个分裂球，和一个加长buff\r\n                if (ceng <= 2 && this.map[(ceng - 1) * this.bricksNumber + i]) {\r\n                    let brickNode = cc.instantiate(this.foodPrefab);\r\n                    let _type;\r\n                    if(special == 0) {\r\n                        _type = foodType.TYPE_BALL\r\n                        ballCnt++;\r\n                    }\r\n                    else if(special == 1){\r\n                        _type = foodType.TYPE_BUFF;\r\n                        buffCnt++;\r\n                    }\r\n                    else;\r\n                    special++;\r\n                    brickNode.getComponent(\"Food\").init(_type, base);\r\n                    brickNode.parent = this.node;\r\n                    brickNode.x = this.padding + (i % this.cols) * (this.nodeWidth + this.padding) + this.nodeWidth / 2;\r\n                    brickNode.y = yoffset - this.spacing - this.nodeHeight / 2;\r\n                    //brickCnt++;\r\n                    continue;\r\n                }\r\n\r\n                if (rand > 0.45 + pleft + poff) {\r\n                    let brickNode;\r\n                    if (rand > 0.8 + pleft) {\r\n                        brickNode = cc.instantiate(this.foodPrefab);\r\n                        //let _type = foodType.TYPE_BALL;\r\n                        let _type = foodType.TYPE_BUFF;\r\n                        if (rand > 0.96) {\r\n                            _type = foodType.TYPE_BOOM;\r\n                            boomCnt++;\r\n                        }\r\n                        else if (rand > 0.91) (_type = foodType.TYPE_BALL) && ballCnt++;\r\n                        else buffCnt++;\r\n                        //else ballCnt++;\r\n                        if ((_type == foodType.TYPE_BALL && (ballCnt > ballMax || window.gameBalls > ballLimit))|| \r\n                            (_type == foodType.TYPE_BOOM && (boomCnt > boomMax)) || \r\n                            (_type == foodType.TYPE_BUFF && (buffCnt > buffMax))) {\r\n                            brickNode.destroy();\r\n                            continue;\r\n                        }\r\n                        brickNode.getComponent(\"Food\").init(_type);\r\n                    }\r\n                    else {\r\n                        //出块数量控制\r\n                        if (brickCnt >= getBrickLimit()) {\r\n                            continue;\r\n                        }\r\n                        //brickNode = cc.instantiate(this.brickPrefab);\r\n                        brickNode = getBrickPrefabNode();\r\n                        brickNode.getComponent(\"Brick\").init(hp);\r\n                        brickCnt++;\r\n                    }\r\n                    brickNode.parent = this.node;\r\n                    brickNode.x = this.padding + (i % this.cols) * (this.nodeWidth + this.padding) + this.nodeWidth / 2;\r\n                    brickNode.y = yoffset - this.spacing - this.nodeHeight / 2;\r\n                }\r\n            }\r\n        } */\r\n\r\n        let down = repeat;\r\n        let over = false;\r\n\r\n        this.node.children.map((node) => {\r\n            let pos = this.node.convertToWorldSpaceAR(node.getPosition());\r\n            let death = this.line.parent.convertToWorldSpaceAR(this.line.getPosition()).y;\r\n            let left = Math.floor((pos.y - death) / (this.nodeHeight + this.spacing) + 0.5);\r\n            down = Math.min(left, down);\r\n            if (left <= repeat) over = true;\r\n        });\r\n\r\n        this.node.children.map((node) => {\r\n            let pos = this.node.convertToWorldSpaceAR(node.getPosition());\r\n            let death = this.line.parent.convertToWorldSpaceAR(this.line.getPosition()).y;\r\n\r\n            let finished = cc.callFunc(function (obj, target) {\r\n\r\n            }, this, this.node.children.length);\r\n            let action = cc.sequence(cc.moveBy(timeOut * down / repeat, cc.p(0, -(this.nodeHeight + this.spacing) * down)), finished);\r\n            node.runAction(action);\r\n        });\r\n        return over;\r\n        //}\r\n    },\r\n\r\n\r\n    //then, fp\r\n    destroyNode: function (node) {\r\n        let brick = node ? node.getComponent(\"Brick\") : null;\r\n        if (brick) brick.broken();\r\n    },\r\n\r\n    destroyOneRow: function (pos) {\r\n        var getList = (arr) => getSameRow(pos, arr);\r\n        var destroyList = (arr) => map(this.destroyNode, arr);\r\n        compose(destroyList, getList)(this.node.children);\r\n    },\r\n    destroyOneColumn: function (pos) {\r\n        var getList = (arr) => getSameColumn(pos, arr);\r\n        var destroyList = (arr) => map(this.destroyNode, arr);\r\n        compose(destroyList, getList)(this.node.children);\r\n    },\r\n    destroy4Side: function (pos) {\r\n        {\r\n            let isNear = (p2) => equi(distance(pos, p2), this.nodeWidth + this.padding);\r\n            let getRow = (arr) => getSameRow(pos, arr);\r\n            let getNear = (arr) => map((node) => node && isNear(node) ? node : null, arr);\r\n            let getList = compose(getNear, getRow);\r\n            let destroyList = (arr) => map(this.destroyNode, arr);\r\n            compose(destroyList, getList)(this.node.children);\r\n        }\r\n        {\r\n            let isNear = (p2) => equi(distance(pos, p2), this.nodeHeight + this.spacing);\r\n            let getColumn = (arr) => getSameColumn(pos, arr);\r\n            let getNear = (arr) => map((node) => node && isNear(node) ? node : null, arr);\r\n            let getList = compose(getNear, getColumn);\r\n            let destroyList = (arr) => map(this.destroyNode, arr);\r\n            compose(destroyList, getList)(this.node.children)\r\n        }\r\n    }\r\n});\r\n\r\n\r\n"]}