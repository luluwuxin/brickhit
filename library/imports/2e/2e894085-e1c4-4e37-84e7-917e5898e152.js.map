{"version":3,"sources":["../../../../../assets/scripts/gameLogic/assets/scripts/gameLogic/Player.js"],"names":["common","require","cc","Class","extends","Component","properties","ballNode","Node","line","touch","ballPrefab","Prefab","mntNode","buffMnt","paddle","minRotation","speed","onLoad","reset","game","paddlePos","node","getPosition","balls","removeAllChildren","stop","setPosition","active","getInput","on","onTouchStart","onTouchMove","onTouchEnd","event","src","parent","convertToWorldSpaceAR","dst","getLocation","dir","v2","x","y","alph","Math","atan","PI","convertToNodeSpaceAR","rotation","abs","_dir","convertToNodeSpace","off","newBall","instantiate","normalizev","getComponent","setSpeed","pos","window","gameBalls","ballsMap","id","start"],"mappings":"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","file":"Player.js","sourceRoot":"../../../../../assets/scripts/gameLogic","sourcesContent":["// Learn cc.Class:\r\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/class.html\r\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/class/index.html\r\n// Learn Attribute:\r\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/reference/attributes/index.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/life-cycle-callbacks/index.html\r\n\r\nvar common = require(\"Common\");\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n        ballNode: cc.Node,\r\n        line: cc.Node,\r\n        touch:cc.Node,\r\n        ballPrefab: cc.Prefab,\r\n        mntNode: cc.Node,\r\n        buffMnt: cc.Node,\r\n        paddle: require(\"Paddle\"),\r\n        minRotation: 5,\r\n        speed:800,\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n     onLoad () {\r\n    },\r\n    reset: function(game){\r\n        this.paddlePos = this.paddlePos? this.paddlePos:this.paddle.node.getPosition();\r\n        this.game = game;\r\n        this.balls = 0;\r\n        //this.mntNode.removeAllChildren();\r\n        this.buffMnt.removeAllChildren();\r\n        this.paddle.stop();\r\n        this.paddle.node.setPosition(this.paddlePos);\r\n        //console.log(\"set paddle position#################\", this.paddle.node.getPosition(), \"------\", this.paddlePos);\r\n        this.ballNode.active = true;\r\n        this.getInput();\r\n    },\r\n    getInput : function (){\r\n        //console.log(\"getInput\");\r\n        this.touch.on(\"touchstart\", this.onTouchStart, this);\r\n        this.touch.on(\"touchmove\", this.onTouchMove, this);\r\n        this.touch.on(\"touchend\", this.onTouchEnd, this);\r\n    },\r\n    onTouchStart: function(event){\r\n        let src = this.ballNode.parent.convertToWorldSpaceAR(this.ballNode.getPosition());\r\n        let dst = event.getLocation();\r\n        let dir = cc.v2(dst.x - src.x, dst.y - src.y);\r\n        let alph = 0.0;\r\n        if (dir.y != 0.0) alph = Math.atan(dir.x / dir.y);\r\n        alph = alph * 180 / Math.PI;\r\n        //console.log(alph);\r\n        this.line.setPosition(this.line.parent.convertToNodeSpaceAR(src));\r\n        this.line.rotation = alph;\r\n        this.line.active = Math.abs(alph) <= 90 - this.minRotation;\r\n\r\n    },\r\n    onTouchMove : function(event){\r\n        let src = this.ballNode.parent.convertToWorldSpaceAR(this.ballNode.getPosition());\r\n        let dst = event.getLocation();\r\n        let dir = cc.v2(dst.x - src.x, dst.y - src.y);\r\n        {\r\n            let alph = 0.0;\r\n            if (dir.y != 0.0) alph = Math.atan(dir.x / dir.y);\r\n            alph = alph * 180 / Math.PI;\r\n            //console.log(alph);\r\n            this.line.rotation = alph;\r\n            this.line.active = Math.abs(alph) <= 90 - this.minRotation;\r\n        }\r\n        {\r\n            let alph = Math.PI / 2;\r\n            if (dir.x != 0.0) alph = Math.atan(dir.y / dir.x);\r\n            alph = alph * 180 / Math.PI;\r\n            if ((Math.abs(alph)) < this.minRotation) return;\r\n            if (dir.y < 0) {\r\n                dir.x = -dir.x;\r\n                dir.y = -dir.y;\r\n            }\r\n            this._dir = dir;\r\n        }\r\n\r\n    },\r\n    onTouchEnd: function (event) {\r\n        this.line.active = false;\r\n        let src = this.ballNode.parent.convertToWorldSpaceAR(this.ballNode.getPosition());\r\n        let dst = this.node.convertToNodeSpace(event.getLocation());\r\n        let dir = cc.v2(dst.x - src.x, dst.y - src.y);\r\n        let alph = Math.PI / 2;\r\n        if (dir.x != 0.0) alph = Math.atan(dir.y / dir.x);\r\n        alph = alph * 180 / Math.PI;\r\n        if ((Math.abs(alph)) < this.minRotation) return;\r\n        if (dir.y < 0) {\r\n            dir.x = -dir.x;\r\n            dir.y = -dir.y;\r\n        }\r\n        //console.log(dir);\r\n        this.touch.off(\"touchstart\", this.onTouchStart, this);\r\n        this.touch.off(\"touchmove\", this.onTouchMove, this);\r\n        this.touch.off(\"touchend\", this.onTouchEnd, this);\r\n        this.ballNode.active = false;\r\n        alph = alph * Math.PI / 180;\r\n        let newBall = cc.instantiate(this.ballPrefab);\r\n        dir = common.normalizev([dir.x, dir.y]);\r\n        newBall.getComponent(\"Ball\").setSpeed(this.speed * dir[0], this.speed * dir[1]);\r\n        let pos = src;\r\n        //let mntNode = cc.find(\"Canvas/gameLogic/mntNode\");\r\n        //pos = mntNode.convertToNodeSpaceAR(pos);\r\n        pos = this.mntNode.convertToNodeSpaceAR(pos);\r\n        newBall.parent = this.mntNode;\r\n        newBall.setPosition(pos);\r\n        newBall.active = true;\r\n        window.gameBalls += 1;\r\n        window.ballsMap[newBall.getComponent(\"Ball\").id] = true;\r\n        //console.log(window.ballsMap[newBall.getComponent(\"Ball\").id]);\r\n        this.paddle.reset(this.game);\r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n"]}