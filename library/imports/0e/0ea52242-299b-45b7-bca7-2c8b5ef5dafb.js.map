{"version":3,"sources":["../../../../../assets/scripts/gameLogic/assets/scripts/gameLogic/Brick.js"],"names":["Tms","common","require","map","f","arr","compose","f1","f2","x","ShaderUtils","getColorFunc","N","RGBv","hexv","hex2RGB","rgb2hsv","normalize256d","normalize","normalize256dv","vec","RGBv2rgbv","rgbv2hsvv","rgbv","RGBv2hsvv","hsvv","hsv2rgb","rnormalize256d","rnormalize","rnormalize256dv","floorv","Math","floor","rgb2RGB","hsv2RGB","hp","RGB","length","p1","p2","ceil","p","h1","h2","h","hsv","cc","color","Class","extends","Component","properties","hpDisplay","default","type","Label","updateDisplay","force","string","toString","node","active","onLoad","init","rotation","parent","onContacked","dhp","addScore","min","window","gameScore1","broken","stopAllActions","destroy","start","onDestroy","update","dt"],"mappings":"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","file":"Brick.js","sourceRoot":"../../../../../assets/scripts/gameLogic","sourcesContent":["// Learn cc.Class:\r\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/class.html\r\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/class/index.html\r\n// Learn Attribute:\r\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/reference/attributes/index.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/life-cycle-callbacks/index.html\r\n\r\nlet Tms = 5;//变色粒度 [0, Tms)\r\nlet common = require(\"Common\");\r\nlet map = (f, arr) => arr.map(f);\r\nlet compose = (f1, f2) => (x) => f2(f1(x));\r\nvar ShaderUtils = require(\"ShaderUtils\");\r\nlet getColorFunc = function () {\r\n    let N = 5;\r\n    let RGBv = [\r\n        [ 206, 207, 207, ],//0 \r\n        [ 38 , 207, 217, ],//10\r\n        [ 81 , 90 , 255, ],//20\r\n        [ 105, 179, 72 , ],//30\r\n        [ 238, 231, 119, ],//40\r\n        [ 206, 47 , 126, ],//50\r\n        [ 217, 66 , 54 , ],//60\r\n\r\n    ];\r\n    let hexv = [\r\n        \"AC22FF\",\r\n        \"4522D5\",\r\n        \"414AFF\",\r\n        \"26CFD9\",\r\n        \"6FF26E\",\r\n        \"49C62B\",\r\n        \"EEE777\",\r\n        \"F6E738\",\r\n        \"FF870B\",\r\n        \"D94236\",\r\n        \"BB0F4D\",\r\n        \"DE1F7E\",\r\n\r\n        \"BF37FF\",\r\n        \"3025FF\",\r\n        \"426AFF\",\r\n        \"14F3FF\",\r\n        \"5DFF76\",\r\n        \"2EFF19\",\r\n        \"FFF87A\",\r\n        \"FFF14B\",\r\n        \"FF9E17\",\r\n        \"FF4932\",\r\n        \"FA0055\",\r\n        \"FF298F\",\r\n    ];\r\n    RGBv = map(common.hex2RGB, hexv);\r\n\r\n    var rgb2hsv = common.rgb2hsv;\r\n    var normalize256d = (x) => common.normalize(256, x);\r\n    //var normalize256d = (x) => x;\r\n    var normalize256dv = (vec) => map(normalize256d, vec);\r\n    var RGBv2rgbv = (RGBv) => map(normalize256dv, RGBv);\r\n    var rgbv2hsvv = (rgbv) => map(rgb2hsv, rgbv);\r\n    var RGBv2hsvv = compose(RGBv2rgbv, rgbv2hsvv);\r\n\r\n    let hsvv = RGBv2hsvv(RGBv);\r\n    //hsvv = hsvv.sort((a, b)=> a[0] > b[0]);\r\n    \r\n    var hsv2rgb = common.hsv2rgb;\r\n    var rnormalize256d = (x) => common.rnormalize(256, x);\r\n    //var rnormalize256d = (x) => x;\r\n    var rnormalize256dv = (vec) => map(rnormalize256d, vec);\r\n    var floorv = (arr) => map(Math.floor, arr);\r\n    var rgb2RGB = compose(rnormalize256dv, floorv);\r\n    var hsv2RGB = compose(hsv2rgb, rgb2RGB);\r\n    return function (hp) {\r\n        hp = Math.floor(hp / Tms);\r\n        let RGB = RGBv[RGBv.length - 1];\r\n        hp = hp % (N * hsvv.length);\r\n        //if(hp < N * hsvv.length)\r\n        {\r\n            let p1 = Math.floor(hp / N);\r\n            let p2 = Math.ceil(hp / N) % hsvv.length;\r\n            //console.log(p1, p2, hsvv)\r\n            let p = hp % N;\r\n            let h1 = hsvv[p1][0];\r\n            let h2 = hsvv[p2][0];\r\n            let h = (h2 * p + h1 * (N - p))/N; //线性插值\r\n            //let max = Math.max(h1, h2);\r\n            //let min = Math.min(h1, h2);\r\n            //let h = (min * p + max * (N - p))/N; //线性插值\r\n            let hsv = [h, hsvv[p2][1], hsvv[p2][2]];\r\n\t\t\t////let s = (hsvv[p1][1] * p + hsvv[p2][1] * (N - p)) / N;\r\n\t\t\t////let v = (hsvv[p1][2] * p + hsvv[p2][2] * (N - p)) / N;\r\n            //let hsv = [h, s, v];\r\n            RGB = hsv2RGB(hsv);\r\n            //console.log(p1, p2, hsvv,RGB);\r\n\r\n        }\r\n        return cc.color(RGB[0], RGB[1], RGB[2]);\r\n    }\r\n}\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n        hpDisplay: {\r\n            default: null,\r\n            type: cc.Label\r\n        },\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    updateDisplay:function(force){\r\n        let hp = this.hp;\r\n        this.hpDisplay.string =  hp.toString();\r\n        this.hpDisplay.node.active = (hp > 1);\r\n        /*\r\n        if (!force && hp % Tms != (Tms - 1)) return;  //优化处理，颜色不变\r\n\r\n        let norm = 255;\r\n        let prime = 251;\r\n        function range(x) {\r\n            let prime = 127;\r\n            let dx = (norm - prime) / 2;\r\n            return x % prime + dx\r\n        }\r\n        let r = prime * range(Math.floor(hp / Tms)) % norm;\r\n        let g = prime * r % norm;\r\n        let b = g * prime % norm;\r\n        //this.node.color = cc.color(range(r), range(g), range(b));\r\n\r\n        let RGB = [range(r), range(g), range(b)];\r\n        if(Math.max(RGB[0], RGB[1], RGB[2]) != Math.min(RGB[0], RGB[1], RGB[2]))\r\n        {\r\n            let hsv = common.rgb2hsv(RGB);\r\n            hsv[1] = Math.min(1.0, hsv[1] * 1.1);\r\n            RGB = common.hsv2rgb(hsv);\r\n        }\r\n        this.node.color = cc.color(RGB[0], RGB[1], RGB[2]);\r\n        if(Math.floor(hp / Tms) == 0) this.node.color = cc.color(79, 207, 222);\r\n        //this.node.color = this.colorFunc(hp);\r\n        */\r\n    },\r\n    onLoad : function () {\r\n    },\r\n    init : function (hp)\r\n    {\r\n        this.hp = hp;\r\n        //this.colorFunc = getColorFunc();\r\n        this.hpDisplay.node.rotation = -this.hpDisplay.node.parent.rotation;\r\n        this.updateDisplay(true);\r\n    },\r\n    onContacked: function(dhp = 1) {\r\n        //audioManager.play(\"contackAudio\")\r\n        let addScore = Math.min(dhp, this.hp);\r\n        window.gameScore1 += addScore;\r\n        this.hp -= dhp;\r\n        if (this.hp <= 0){\r\n            this.broken();\r\n            return;\r\n        }\r\n        this.updateDisplay();\r\n    },\r\n    broken: function(){\r\n        this.node.stopAllActions();\r\n        this.node.destroy();\r\n    },\r\n    start :function () {\r\n    },\r\n    onDestroy: function(){\r\n        window.gameScore1 += this.hp;\r\n    },\r\n\r\n    update: function (dt) {\r\n\r\n    },\r\n});\r\n"]}