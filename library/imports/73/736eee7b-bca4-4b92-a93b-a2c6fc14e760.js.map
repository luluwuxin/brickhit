{"version":3,"sources":["../../../../../../../../assets/script/wx/utils/cryptojs/lib/assets/script/wx/utils/cryptojs/lib/HMAC.js"],"names":["C","window","require","Crypto","util","charenc","UTF8","Binary","HMAC","hasher","message","key","options","constructor","String","stringToBytes","length","_blocksize","asBytes","okey","slice","ikey","i","hmacbytes","concat","asString","bytesToString","bytesToHex"],"mappings":";;;;;;AAAA,CAAC,YAAU;;AAEX,KAAIA,IAAK,OAAOC,MAAP,KAAkB,WAAnB,GAAkCC,QAAQ,UAAR,EAAoBC,MAAtD,GAA+DF,OAAOE,MAA9E;;AAEA;AACA,KAAIC,OAAOJ,EAAEI,IAAb;AAAA,KACIC,UAAUL,EAAEK,OADhB;AAAA,KAEIC,OAAOD,QAAQC,IAFnB;AAAA,KAGIC,SAASF,QAAQE,MAHrB;;AAKAP,GAAEQ,IAAF,GAAS,UAAUC,MAAV,EAAkBC,OAAlB,EAA2BC,GAA3B,EAAgCC,OAAhC,EAAyC;;AAEjD;AACA,MAAIF,QAAQG,WAAR,IAAuBC,MAA3B,EAAmCJ,UAAUJ,KAAKS,aAAL,CAAmBL,OAAnB,CAAV;AACnC,MAAIC,IAAIE,WAAJ,IAAmBC,MAAvB,EAA+BH,MAAML,KAAKS,aAAL,CAAmBJ,GAAnB,CAAN;AAC/B;;AAEA;AACA,MAAIA,IAAIK,MAAJ,GAAaP,OAAOQ,UAAP,GAAoB,CAArC,EACCN,MAAMF,OAAOE,GAAP,EAAY,EAAEO,SAAS,IAAX,EAAZ,CAAN;;AAED;AACA,MAAIC,OAAOR,IAAIS,KAAJ,CAAU,CAAV,CAAX;AAAA,MACIC,OAAOV,IAAIS,KAAJ,CAAU,CAAV,CADX;AAEA,OAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAIb,OAAOQ,UAAP,GAAoB,CAAxC,EAA2CK,GAA3C,EAAgD;AAC/CH,QAAKG,CAAL,KAAW,IAAX;AACAD,QAAKC,CAAL,KAAW,IAAX;AACA;;AAED,MAAIC,YAAYd,OAAOU,KAAKK,MAAL,CAAYf,OAAOY,KAAKG,MAAL,CAAYd,OAAZ,CAAP,EAA6B,EAAEQ,SAAS,IAAX,EAA7B,CAAZ,CAAP,EAAqE,EAAEA,SAAS,IAAX,EAArE,CAAhB;;AAEA,SAAON,WAAWA,QAAQM,OAAnB,GAA6BK,SAA7B,GACAX,WAAWA,QAAQa,QAAnB,GAA8BlB,OAAOmB,aAAP,CAAqBH,SAArB,CAA9B,GACAnB,KAAKuB,UAAL,CAAgBJ,SAAhB,CAFP;AAIA,EAzBD;AA2BC,CArCD","file":"HMAC.js","sourceRoot":"../../../../../../../../assets/script/wx/utils/cryptojs/lib","sourcesContent":["(function(){\r\n\r\nvar C = (typeof window === 'undefined') ? require('./Crypto').Crypto : window.Crypto;\r\n\r\n// Shortcuts\r\nvar util = C.util,\r\n    charenc = C.charenc,\r\n    UTF8 = charenc.UTF8,\r\n    Binary = charenc.Binary;\r\n\r\nC.HMAC = function (hasher, message, key, options) {\r\n\r\n\t// Convert to byte arrays\r\n\tif (message.constructor == String) message = UTF8.stringToBytes(message);\r\n\tif (key.constructor == String) key = UTF8.stringToBytes(key);\r\n\t/* else, assume byte arrays already */\r\n\r\n\t// Allow arbitrary length keys\r\n\tif (key.length > hasher._blocksize * 4)\r\n\t\tkey = hasher(key, { asBytes: true });\r\n\r\n\t// XOR keys with pad constants\r\n\tvar okey = key.slice(0),\r\n\t    ikey = key.slice(0);\r\n\tfor (var i = 0; i < hasher._blocksize * 4; i++) {\r\n\t\tokey[i] ^= 0x5C;\r\n\t\tikey[i] ^= 0x36;\r\n\t}\r\n\r\n\tvar hmacbytes = hasher(okey.concat(hasher(ikey.concat(message), { asBytes: true })), { asBytes: true });\r\n\r\n\treturn options && options.asBytes ? hmacbytes :\r\n\t       options && options.asString ? Binary.bytesToString(hmacbytes) :\r\n\t       util.bytesToHex(hmacbytes);\r\n\r\n};\r\n\r\n})();\r\n"]}