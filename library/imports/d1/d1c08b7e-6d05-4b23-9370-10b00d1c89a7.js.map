{"version":3,"sources":["../../../../../../assets/script/wx/utils/assets/script/wx/utils/WXBizDataCrypt.js"],"names":["Crypto","require","WXBizDataCrypt","appId","sessionKey","prototype","decryptData","encryptedData","iv","util","base64ToBytes","key","mode","CBC","pad","pkcs7","bytes","AES","decrypt","asBpytes","decryptResult","JSON","parse","err","console","log","watermark","appid","module","exports"],"mappings":";;;;;;AAAA,IAAIA,SAASC,QAAQ,QAAR,CAAb;;AAEA,SAASC,cAAT,CAAwBC,KAAxB,EAA+BC,UAA/B,EAA2C;AACzC,OAAKD,KAAL,GAAaA,KAAb;AACA,OAAKC,UAAL,GAAkBA,UAAlB;AACD;;AAEDF,eAAeG,SAAf,CAAyBC,WAAzB,GAAuC,UAAUC,aAAV,EAAyBC,EAAzB,EAA6B;AAClE,MAAID,gBAAgBP,OAAOS,IAAP,CAAYC,aAAZ,CAA0BH,aAA1B,CAApB;AACA,MAAII,MAAMX,OAAOS,IAAP,CAAYC,aAAZ,CAA0B,KAAKN,UAA/B,CAAV;AACA,MAAII,KAAKR,OAAOS,IAAP,CAAYC,aAAZ,CAA0BF,EAA1B,CAAT;;AAEA,MAAII,OAAO,IAAIZ,OAAOY,IAAP,CAAYC,GAAhB,CAAoBb,OAAOc,GAAP,CAAWC,KAA/B,CAAX;;AAEA,MAAI;AACF;AACA,QAAIC,QAAQhB,OAAOiB,GAAP,CAAWC,OAAX,CAAmBX,aAAnB,EAAkCI,GAAlC,EAAuC;AACjDQ,gBAAU,IADuC;AAEjDX,UAAIA,EAF6C;AAGjDI,YAAMA;AAH2C,KAAvC,CAAZ;;AAMA,QAAIQ,gBAAgBC,KAAKC,KAAL,CAAWN,KAAX,CAApB;AAED,GAVD,CAUE,OAAOO,GAAP,EAAY;AACZC,YAAQC,GAAR,CAAYF,GAAZ;AACD;;AAED,MAAIH,iBAAiBA,cAAc,WAAd,CAAjB,IAA+CA,cAAcM,SAAd,CAAwBC,KAAxB,KAAkC,KAAKxB,KAA1F,EAAiG;AAC/FqB,YAAQC,GAAR,CAAYF,GAAZ;AACD;;AAED,SAAOH,aAAP;AACD,CA1BD;;AA4BAQ,OAAOC,OAAP,GAAiB3B,cAAjB","file":"WXBizDataCrypt.js","sourceRoot":"../../../../../../assets/script/wx/utils","sourcesContent":["var Crypto = require('Crypto');\r\n\r\nfunction WXBizDataCrypt(appId, sessionKey) {\r\n  this.appId = appId;\r\n  this.sessionKey = sessionKey;\r\n}\r\n\r\nWXBizDataCrypt.prototype.decryptData = function (encryptedData, iv) {\r\n  var encryptedData = Crypto.util.base64ToBytes(encryptedData);\r\n  var key = Crypto.util.base64ToBytes(this.sessionKey);\r\n  var iv = Crypto.util.base64ToBytes(iv);\r\n\r\n  var mode = new Crypto.mode.CBC(Crypto.pad.pkcs7);\r\n\r\n  try {\r\n    // 解密\r\n    var bytes = Crypto.AES.decrypt(encryptedData, key, {\r\n      asBpytes: true,\r\n      iv: iv,\r\n      mode: mode\r\n    });\r\n\r\n    var decryptResult = JSON.parse(bytes);\r\n\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n\r\n  if (decryptResult && decryptResult[\"watermark\"] && decryptResult.watermark.appid !== this.appId) {\r\n    console.log(err);\r\n  }\r\n\r\n  return decryptResult;\r\n}\r\n\r\nmodule.exports = WXBizDataCrypt;\r\n"]}