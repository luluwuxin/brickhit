{"version":3,"sources":["../../../../../assets/scripts/gameLogic/assets/scripts/gameLogic/Buff.js"],"names":["settings","require","getpList","score","getSet","buffSetting","pList","getType","computepl","cc","Class","extends","Component","properties","spriteFrame","default","type","SpriteFrame","displayName","init","_type","sprite","node","getComponent","Sprite","start"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMA,WAAUC,QAAQ,UAAR,CAAhB;AACA,IAAMC,WAAU,SAAVA,QAAU,CAACC,KAAD;AAAA,WAASH,SAASI,MAAT,CAAgBJ,SAASK,WAAzB,EAAsCF,KAAtC,EAA6CG,KAAtD;AAAA,CAAhB;AACA,IAAMC,UAAU,SAAVA,OAAU,CAACJ,KAAD;AAAA,WAASH,SAASQ,SAAT,CAAmBN,SAASC,KAAT,CAAnB,CAAT;AAAA,CAAhB;AACAM,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,qBAAa;AACTC,qBAAS,EADA;AAETC,kBAAM,CAACP,GAAGQ,WAAJ,CAFG;AAGTC,yBAAa;AAHJ;AAhBL,KAHP;;AA0BL;;AAEA;AACAC,UAAM,cAAUhB,KAAV,EAAiB;AACnB;AACA,YAAIiB,QAAQb,QAAQJ,KAAR,CAAZ;AACA;AACA,aAAKiB,KAAL,GAAaA,KAAb;AACA,YAAIC,SAAS,KAAKC,IAAL,CAAUC,YAAV,CAAuBd,GAAGe,MAA1B,CAAb;AACAH,eAAOP,WAAP,GAAqB,KAAKA,WAAL,CAAiBM,QAAQ,CAAzB,CAArB;AACA;AACH,KArCI;;AAuCLK,SAvCK,mBAuCG,CAEP;AAzCI;;AA2CL;AA3CJ","file":"Buff.js","sourceRoot":"../../../../../assets/scripts/gameLogic","sourcesContent":["// Learn cc.Class:\r\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/class.html\r\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/class/index.html\r\n// Learn Attribute:\r\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/reference/attributes/index.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/life-cycle-callbacks/index.html\r\nconst settings =require(\"Settings\");\r\nconst getpList= (score)=>settings.getSet(settings.buffSetting, score).pList;\r\nconst getType = (score)=>settings.computepl(getpList(score));\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n        spriteFrame: {\r\n            default: [],\r\n            type: [cc.SpriteFrame],\r\n            displayName: \"spriteFrame\",\r\n        },\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {},\r\n    init: function (score) {\r\n        //_type = Math.min(Math.floor(cc.random0To1() * this.spriteFrame.length), this.spriteFrame.length - 1);\r\n        let _type = getType(score);\r\n        //console.log(_type);\r\n        this._type = _type;\r\n        let sprite = this.node.getComponent(cc.Sprite);\r\n        sprite.spriteFrame = this.spriteFrame[_type - 1];\r\n        //if(_type == 0) console.log(sprite.spriteFrame, this.node.active);\r\n    },\r\n\r\n    start() {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n"]}